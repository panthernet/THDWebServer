@using ThunderED.Modules
@using ThunderED.Helpers
@using ThunderED.Json
@using ThunderED.Classes.Entities
@using System.Linq.Dynamic.Core
@using Microsoft.AspNetCore.Html

@inject AuthenticationStateProvider Auth
@inject ProtectedSessionStorage Store
@attribute [Authorize(Roles = CustomAuthenticationStateProvider.ROLE_HRM)]
@inject NavigationManager Nav
@inject IModalService Modal

<div class="modal-content hrm-inspect">
    <div class="modal-header">
        <h5 class="modal-title">@LM.Get("hrmInspectingHeader", MemberData?.CharacterName)</h5>
        <button type="button" class="close" @onclick="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        <div>
            @if (_access.CanSearchMail)
            {
                <button class="btn btn-primary" @onclick="ExecuteSearchMail" style="margin: 10px; min-width: 100px;">@LM.Get("hrmButSearchMail")</button>
            }
            @if (_access.CanKickUsers)
            {
                <button class="btn btn-danger" @onclick="ExecuteKickUser" style="margin: 10px; min-width: 100px;">@LM.Get("hrmButDeleteUserAuth")</button>
            }

            <div class="row" style="padding: .3rem 1rem;">
                <!-- Images column-->
                <div class="col-auto">
                    <div class="container">
                        <div class="row">
                            <div class="col-auto col-hrm-img">
                                <div>
                                    <img src="@_corpImage" alt="corp logo" class="corp-img">
                                </div>
                                @if (_hasAlliance)
                                {
                                    <div>
                                        <img src="@_allianceImage" alt="alli logo" class="corp-img">
                                    </div>
                                }
                            </div>
                            <div class="col-auto col-hrm-img">
                                <img src="@_charImage" alt="character image" class="char-img">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-5 col-lg-5" style="font-size: small">
                    <div class="row-fluid">
                        @LM.Get("hrmInspectChar"):&nbsp; <a href="@($"https://zkillboard.com/character/{_character?.CharacterId}")">@MemberData.CharacterName</a>
                    </div>
                    <div class="row-fluid">
                        @LM.Get("hrmInspectCorp"):&nbsp; <a href="@($"https://zkillboard.com/corporation/{_character?.Data.CorporationId}")">@($"{_character?.Data.CorporationName} [{_character?.Data.CorporationTicker}]")</a>
                    </div>
                    @if (_hasAlliance)
                    {
                        <div class="row-fluid">
                            @LM.Get("hrmInspectAlly"):&nbsp; <a href="@($"https://zkillboard.com/alliance/{_character?.Data.AllianceId}")">@($"{_character?.Data.AllianceName} [{_character?.Data.AllianceTicker}]")</a>
                        </div>
                    }
                    <div class="row-fluid">
                        @LM.Get("hrmInspectSS"):&nbsp; @(_character?.MiscData.SecurityStatus != null ? Math.Round(_character.MiscData.SecurityStatus.Value, 1).ToString("0.0") : null)
                    </div>
                    <div class="row-fluid">
                        @LM.Get("hrmInspectBirth"):&nbsp; @_character?.MiscData.BirthDate.ToString(_module.Settings.Config.ShortTimeFormat)
                    </div>
                    @if (SettingsManager.HasCharSkillsScope(_character?.Data.PermissionsList) && _hasToken)
                    {
                        <div class="row-fluid">
                            SP:&nbsp; @_totalSp
                        </div>
                    }
                    @if (SettingsManager.HasCharWalletScope(_character?.Data.PermissionsList) && _hasToken)
                    {
                        <div class="row-fluid">
                            ISK:&nbsp; @_totalIskBalance
                        </div>
                    }
                    @if (SettingsManager.HasCharLocationScope(_character?.Data.PermissionsList) && _hasToken)
                    {
                        <div class="row-fluid">
                            @LM.Get("hrmInspectLocation"):&nbsp; @_locationData
                        </div>
                    }
                    @if (SettingsManager.HasCharShipTypeScope(_character?.Data.PermissionsList) && _hasToken)
                    {
                        <div class="row-fluid">
                            @LM.Get("hrmInspectShip"):&nbsp; @_shipData
                        </div>
                    }
                    <div class="row-fluid">
                        @LM.Get("hrmInspectIp"):&nbsp; @(string.IsNullOrEmpty(_character?.Ip) ? LM.Get("Unknown") : _character.Ip)
                    </div>
                </div>
            </div>
            <div class="row" style="padding: .3rem 1rem;">
                <RadzenTabs Style="padding: 0;">
                    <Tabs>
                        <RadzenTabsItem Text="@LM.Get("hrmTabCorpHistory")" Style="padding: 0;">
                            <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="30" Count="@(_corpHistoryList?.Count ?? 0)" AllowSorting="true" Data="@_corpHistoryList" TItem="JsonClasses.CorporationHistoryEntry"
                                        LoadData="@LoadCorpHistoryData" Style="height: 320px;">
                                <Columns>
                                    <RadzenGridColumn TItem="JsonClasses.CorporationHistoryEntry" Filterable="false" Sortable="false" Width="50px">
                                        <Template Context="order">
                                            <RadzenImage Path="@($"https://image.eveonline.com/Corporation/{order.corporation_id}_32.png")" Style="width: 32px; height: 32px; display: block" />
                                        </Template>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="JsonClasses.CorporationHistoryEntry" Title="@LM.Get("hrmCVCorpName")">
                                        <Template Context="order">
                                            <a href="@($"https://zkillboard.com/corporation/{order.corporation_id}")">
                                                @($"{order.CorpName} [{order.CorpTicker}] {(order.IsNpcCorp ? " (npc)" : null)}{(order.is_deleted ? " (closed)" : null)}")
                                            </a>
                                        </Template>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="JsonClasses.CorporationHistoryEntry" Title="@LM.Get("hrmCVJoined")" Width="120px">
                                        <Template Context="order">
                                            @(order.Date.ToShortDateString())
                                        </Template>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="JsonClasses.CorporationHistoryEntry" Title="@LM.Get("hrmCVDays")" Width="120px">
                                        <Template Context="order">
                                            @(order.Days)
                                        </Template>
                                    </RadzenGridColumn>
                                </Columns>
                            </RadzenGrid>
                            @if (_isCorpsLoading)
                            {
                                <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                            }
                        </RadzenTabsItem>
                        @if (SettingsManager.HasReadMailScope(_character?.Data.PermissionsList) && _hasToken)
                        {
                            <RadzenTabsItem Text="@LM.Get("hrmTabMail")">
                                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="20" Count="@_countMail" AllowSorting="true" Data="@_mailList" TItem="WebMailHeader"
                                            LoadData="@LoadMailData" Style="height: 320px;" RowDoubleClick="async args=> await OnMailRowClick(args)">
                                    <Columns>
                                        <RadzenGridColumn TItem="WebMailHeader" Title="@LM.Get("mailSubjectHeader")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Subject" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebMailHeader" Title="@LM.Get("mailFromHeader")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.FromName" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebMailHeader" Title="@LM.Get("mailToHeader")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.ToName" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebMailHeader" Title="@LM.Get("mailDateHeader")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@(order.Date.ToShortDateString())" />
                                            </Template>
                                        </RadzenGridColumn>
                                    </Columns>
                                </RadzenGrid>
                                @if (_isMailLoading)
                                {
                                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                                }
                            </RadzenTabsItem>
                        }
                        @if (SettingsManager.HasCharContractsScope(_character?.Data.PermissionsList) && _hasToken)
                        {
                            <RadzenTabsItem Text="@LM.Get("hrmTabContracts")">
                                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="30" Count="@_countContracts" AllowSorting="true" Data="@_contractsList" TItem="WebContract"
                                            LoadData="@LoadContractsData" Style="height: 320px;">
                                    <Columns>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractType")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Type" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractFrom")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.From" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractTo")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.To" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractStatus")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Status" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractDate")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@(order.CompleteDate)" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractInfo")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Title" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContract" Title="@LM.Get("hrmContractItems")">
                                            <Template Context="order">
                                                @if (!string.IsNullOrEmpty(order.IncludedItems))
                                                {
                                                    <div>@LM.Get("contractMsgIncludedItems")<img src="https://github.com/panthernet/ThunderED/blob/master/ThunderED/Content/Icons/itemIconSmall.png?raw=true" alt="" title="@order.IncludedItems" /></div>
                                                }
                                                @if (!string.IsNullOrEmpty(order.AskingItems))
                                                {
                                                    <div>@LM.Get("contractMsgAskingItems")<img src="https://github.com/panthernet/ThunderED/blob/master/ThunderED/Content/Icons/itemIconSmall.png?raw=true" alt="" title="@order.AskingItems" /></div>
                                                }
                                            </Template>
                                        </RadzenGridColumn>
                                    </Columns>
                                </RadzenGrid>
                                @if (_isContractsLoading)
                                {
                                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                                }
                            </RadzenTabsItem>
                        }
                        @if (SettingsManager.HasCharContactsScope(_character?.Data.PermissionsList) && _hasToken)
                        {
                            <RadzenTabsItem Text="@LM.Get("hrmTabContacts")">
                                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="30" Count="@_countContacts" AllowSorting="true" Data="@_contactsList" TItem="WebContact"
                                            LoadData="@LoadContactsData" Style="height: 320px;">
                                    <Columns>
                                        <RadzenGridColumn TItem="WebContact" Title="@LM.Get("hrmContactName")">
                                            <Template Context="order">
                                                <RadzenLink Text="@order.Name" Path="@order.ZkbLink" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContact" Title="@LM.Get("hrmContactType")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Type" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContact" Title="@LM.Get("hrmContractBlocked")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Blocked" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContact" Title="@LM.Get("hrmContractStand")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Stand" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebContact" Title="@LM.Get("hrmContractHrStand")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.HrStand" />
                                            </Template>
                                        </RadzenGridColumn>
                                    </Columns>
                                </RadzenGrid>
                                @if (_isContactsLoading)
                                {
                                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                                }
                            </RadzenTabsItem>
                        }
                        @if (SettingsManager.HasCharWalletScope(_character?.Data.PermissionsList) && _hasToken)
                        {
                            <RadzenTabsItem Text="@LM.Get("hrmTabJournal")">
                                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="30" Count="@_countWalletJournal" AllowSorting="true" Data="@_walletJournalList" TItem="WebWalletJournal"
                                            LoadData="@LoadWalletJournalData" Style="height: 320px;">
                                    <Columns>
                                        <RadzenGridColumn TItem="WebWalletJournal" Title="@LM.Get("hrmJournalDate")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Date.ToString(SettingsManager.Settings.Config.ShortTimeFormat)" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebWalletJournal" Title="@LM.Get("hrmJournalType")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Type" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebWalletJournal" Title="@LM.Get("hrmJournalAmount")">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Amount" Class="@order.WebClass" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebWalletJournal" Title="@LM.Get("hrmJournalDescription")">
                                            <Template Context="order">
                                                <div style="position: relative;" tooltip="@order.Description">@order.Description</div>
                                            </Template>
                                        </RadzenGridColumn>
                                    </Columns>
                                </RadzenGrid>
                                @if (_isWalletJournalLoading)
                                {
                                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                                }
                            </RadzenTabsItem>
                        }
                        @if (SettingsManager.HasCharSkillsScope(_character?.Data.PermissionsList) && _hasToken)
                        {
                            <RadzenTabsItem Text="@LM.Get("hrmTabSkills")">
                                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="30" Count="@_countSkillsList" AllowSorting="false" Data="@_skillsList" TItem="WebSkillItem"
                                            LoadData="@LoadSkillsData" Style="height: 320px;" AllowColumnResize="true">
                                    <Columns>
                                        <RadzenGridColumn TItem="WebSkillItem" Title="@LM.Get("hrmSkillName")" FilterProperty="Name">
                                            <Template Context="order">
                                                <RadzenLabel Text="@order.Name" Style="@($"color: {(order.IsCategory ? "gray":"black")};")" />
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="WebSkillItem" Title="@LM.Get("hrmSkillLevel")" FilterProperty="ValueTrained"
                                                          Width="120">
                                            <Template Context="order">
                                                @if (!order.IsCategory)
                                                {
                                                    @((MarkupString) order.Visual)
                                                }
                                            </Template>
                                        </RadzenGridColumn>
                                    </Columns>
                                </RadzenGrid>
                                @if (_isSkillsListLoading)
                                {
                                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                                }
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </div>
        </div>
    </div>
</div>

@code {
    private HRMModule _module;
    private HRMAccessFilter _access = new HRMAccessFilter();
    [Parameter] public WebUserItem MemberData { get; set; }
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    //[CascadingParameter] IModalService Modal { get; set; }

    private bool _hasAlliance;
    private AuthUserEntity _character;
    private AuthUserEntity _inspector;
    private string _reason = "HRM";
    private bool _hasToken;
    private string _inspectToken;

    private string _corpImage;
    private string _allianceImage;
    private string _charImage;
    private string _totalSp;
    private string _totalIskBalance;
    private string _locationData;
    private string _shipData;

    private List<JsonClasses.CorporationHistoryEntry> _corpHistoryList;
    private List<WebMailHeader> _mailList;
    private List<WebContract> _contractsList;
    private List<WebContact> _contactsList;
    private List<WebWalletTrans> _walletTransList;
    private List<WebWalletJournal> _walletJournalList;
    private List<WebSkillItem> _skillsList;

    #region Grid vars

    private bool _isCorpsLoading = true;
    private bool _isMailLoading = true;
    private bool _isContractsLoading = true;
    private bool _isContactsLoading = true;
    private bool _isWalletTransLoading = true;
    private bool _isWalletJournalLoading = true;
    private bool _isSkillsListLoading = true;

    private int _countMail;
    private int _countContacts;
    private int _countContracts;
    private int _countWalletTrans;
    private int _countWalletJournal;
    private int _countSkillsList;

    #endregion

    #region Cache
    private List<WebMailHeader> _mailListCache;
    private List<WebContract> _contractsListCache;
    private List<WebContact> _contactsListCache;
    private List<WebWalletTrans> _walletTransListCache;
    private List<WebWalletJournal> _walletJournalListCache;
    private List<WebSkillItem> _skillsListCache;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        if (!HRMModule.HasWebAccess(user.Id))
        {
            Nav.NavigateTo("/", true);
            return;
        }
        _module = TickManager.GetModule<HRMModule>();
        if (_module == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }
        _access = await _module.WebGetAccess(user.Id);
        if (_access == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        _inspector = await SQLHelper.GetAuthUserByCharacterId(user.Id);
        if (_inspector == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        await LoadCharacterData();

        await base.OnInitializedAsync();
    }

    private async Task LoadCharacterData()
    {
        _character = await SQLHelper.GetAuthUserByCharacterId(MemberData.Id);
        if (_character == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }
        await _character.UpdateData();

        _hasAlliance = _character.Data.AllianceId > 0;
        _corpImage = $"https://images.evetech.net/corporations/{_character.Data.CorporationId}/logo?tenant=tranquility&size=64";
        _allianceImage = $"https://images.evetech.net/alliances/{_character.Data.AllianceId}/logo?tenant=tranquility&size=64";
        _charImage = $"https://image.eveonline.com/Character/{_character.CharacterId}_256.png";

        _hasToken = _character.HasToken;
        if (_hasToken)
        {
            var tq = await APIHelper.ESIAPI.RefreshToken(_character.RefreshToken,
                _module.Settings.WebServerModule.CcpAppClientId,
                _module.Settings.WebServerModule.CcpAppSecret, $"From {_reason} | Char ID: {_character.CharacterId} | Char name: {_character.Data.CharacterName}");
            _inspectToken = tq.Result;
            if (!string.IsNullOrEmpty(_inspectToken))
            {

                if (SettingsManager.HasCharLocationScope(_character.Data.PermissionsList))
                {
                    var locationData =
                        await APIHelper.ESIAPI.GetCharacterLocation(_reason, _character.CharacterId, _inspectToken);
                    var system =
                        await APIHelper.ESIAPI.GetSystemData(_reason, locationData?.solar_system_id ?? 0);
                    var station = locationData.station_id > 0 ? await APIHelper.ESIAPI.GetStationData(_reason, locationData.station_id, _inspectToken)
                        : null;
                    var citadel = locationData.structure_id > 0 ? await APIHelper.ESIAPI.GetStructureData(_reason, locationData.structure_id, _inspectToken)
                        : null;
                    var loc = station != null ? station.name : citadel?.name;

                    _locationData = $"{system.name} {loc}";
                }
                if (SettingsManager.HasCharShipTypeScope(_character.Data.PermissionsList))
                {
                    var stData =
                        await APIHelper.ESIAPI.GetCharacterShipType(_reason, _character.CharacterId, _inspectToken);
                    var tType = await APIHelper.ESIAPI.GetTypeId(_reason, stData.ship_type_id);
                    _shipData = tType.name;
                }
                if (SettingsManager.HasCharSkillsScope(_character.Data.PermissionsList))
                {
                    await Task.Factory.StartNew(async () =>
                    {
                        var values = await _module.WebGetSkills(_character.CharacterId, _inspectToken);
                        _skillsListCache = _skillsList = values[1] as List<WebSkillItem>;
                        _totalSp = ((int) values[0]).ToString("N0");

                        await InvokeAsync(StateHasChanged);
                    });

                }
                await LoadWalletData();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _hasToken = false;
                _character.RefreshToken = null;
            }
        }
    }

    private async Task LoadSkillsData(LoadDataArgs args)
    {
        if (_skillsListCache == null)
        {
            var count = 0;
            while (count < 10)
            {
                if (_skillsListCache == null)
                {
                    await Task.Delay(1000);
                    count++;
                }
                else break;
            }
            if (count >= 10)
                return;
        }

        _skillsList = ApplyAjaxFilters(_skillsListCache, args, out _countSkillsList);
        _isSkillsListLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadWalletData()
    {
        if (_hasToken && SettingsManager.HasCharWalletScope(_character.Data.PermissionsList))
        {
            var value = await APIHelper.ESIAPI.GetCharacterWalletBalance(_reason, _character.CharacterId, _inspectToken);
            _totalIskBalance = value.ToString("N");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadWalletJournalData(LoadDataArgs args)
    {
        _walletJournalListCache ??= await _module.WebGetWalletJournal(_character.CharacterId, _inspectToken);
        if (_walletJournalListCache == null) return;
        _walletJournalList = ApplyAjaxFilters(_walletJournalListCache, args, out _countWalletJournal);
        _isWalletJournalLoading = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task LoadMailData(LoadDataArgs args)
    {
        _mailListCache ??= await _module.WebGetMailHeaders(_character.CharacterId, _inspectToken);
        _mailList = ApplyAjaxFilters(_mailListCache, args, out _countMail);
        _isMailLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadCorpHistoryData(LoadDataArgs args)
    {
        _corpHistoryList = ApplyAjaxFilters(await _module.WebGenerateCorpHistory(_character.CharacterId), args, out _);
        _isCorpsLoading = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task LoadContractsData(LoadDataArgs args)
    {
        _contractsListCache ??= await _module.WebGetCharContracts(_character.CharacterId, _inspectToken);
        _contractsList = ApplyAjaxFilters(_contractsListCache, args, out _countContracts);
        _isContractsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadContactsData(LoadDataArgs args)
    {
        _contactsListCache ??= await _module.WebGetCharContacts(_character.CharacterId, _inspectToken, _inspector.CharacterId);
        _contactsList = ApplyAjaxFilters(_contactsListCache, args, out _countContacts);
        _isContactsLoading = false;
        await InvokeAsync(StateHasChanged);
    }


    private void ExecuteSearchMail()
    {
        //todo
    }

    private async void ExecuteKickUser()
    {
        if (await Modal.ShowConfirm(LM.Get("webWarning"), LM.Get("hrmButDeleteUserAuthConfirm")))
        {
            if (await _module.WebDeleteUser(MemberData))
            {
                await BlazoredModal.CloseAsync(ModalResult.Ok(false));
            }
        }
    }

    private List<T> ApplyAjaxFilters<T>(IEnumerable<T> list, LoadDataArgs args, out int count)
    {
        var query = list.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);
        count = query.Count();

        if (!string.IsNullOrEmpty(args.OrderBy))
            query = query.OrderBy(args.OrderBy);
        if (args.Skip.HasValue)
            query = query.Skip(args.Skip.Value);
        if (args.Top.HasValue)
            query = query.Take(args.Top.Value);
        return query.ToList();
    }

    async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));

    private async Task OnMailRowClick(WebMailHeader args)
    {
        var prms = new ModalParameters();
        prms.Add("MailId", args.MailId);
        prms.Add("UserId", _character.CharacterId);
        prms.Add("Token", _inspectToken);
        var o = new ModalOptions { DisableBackgroundCancel = false, Animation = ModalAnimation.FadeIn(1), HideHeader = true, ContentScrollable = true };
        await Modal.Show<MailViewer>("null", prms, o).Result;
    }


}
