@using ThunderED.Modules
@using ThunderED.Helpers
@using ThunderED.Json
<div class="modal-content text-center">
    <!--Body-->
    <div class="modal-body">
        <RadzenCard Style="width:600px; margin-bottom: 20px; height:500px;">
            <div class="row">
                <div class="col-md-6">
                    <div>@LM.Get("mailDateHeader"): <b>@Mail?.Date</b></div>
                    <div style="margin-top:2px">@LM.Get("mailFromHeader"): <b>@Mail?.Date</b></div>
                    <div style="margin-top:2px">@LM.Get("mailSubjectHeader"): <b>@Mail?.Header</b></div>
                    <div style="margin-top:2px">@LM.Get("TextHeader"): </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    Mail?.Content
                </div>
            </div>
        </RadzenCard>

    </div>

    <!--Footer-->
    <div class="modal-footer flex-center">
        <button class="btn btn-outline-info waves-effect" @onclick="OnClose">@LM.Get("close")</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public long MailId { get; set; }
    [Parameter]
    public long UserId { get; set; }
    [Parameter]
    public string Token { get; set; }

    private WebMailContent Mail { get; set; }

    void OnClose() => BlazoredModal.Cancel();

    protected override async Task OnInitializedAsync()
    {

        var mail = await APIHelper.ESIAPI.GetMail("HRM", UserId, Token, MailId);

        var from = await APIHelper.ESIAPI.GetCharacterData("HRM", mail.@from);
        var corpHistory = await APIHelper.ESIAPI.GetCharCorpHistory("HRM", mail.@from);
        var date = DateTime.Parse(mail.timestamp);
        var corp = corpHistory.OrderByDescending(a => a.Date)
            .FirstOrDefault(a => date >= a.Date);
        var fromCorp = corp == null
            ? null
            : await APIHelper.ESIAPI.GetCorporationData("HRM", corp.corporation_id);
        var corpText = fromCorp == null
            ? null
            : $" - {fromCorp.name}[{fromCorp.ticker}]";
        var sList = await MailModule.PrepareBodyMessage(mail.body, true);

        Mail = new WebMailContent
        {
            Date = date.ToString(SettingsManager.Settings.Config.ShortTimeFormat),
            From = $"{@from?.name}{corpText}",
            Header = mail.subject,
            Content = sList[0]
        };

        await base.OnInitializedAsync();
    }

    public class WebMailContent
    {
        public string Date { get; set; }
        public string From { get; set; }
        public string Header { get; set; }
        public string Content { get; set; }
    }

}
